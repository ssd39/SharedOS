{"version":3,"file":"y-ably","sources":["../../y-webrtc/src/crypto.js","../../y-webrtc/src/y-ably.js"],"sourcesContent":["/* eslint-env browser */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as promise from 'lib0/promise'\nimport * as error from 'lib0/error'\nimport * as string from 'lib0/string'\n\n/**\n * @param {string} secret\n * @param {string} roomName\n * @return {PromiseLike<CryptoKey>}\n */\nexport const deriveKey = (secret, roomName) => {\n  const secretBuffer = string.encodeUtf8(secret).buffer\n  const salt = string.encodeUtf8(roomName).buffer\n  return crypto.subtle.importKey(\n    'raw',\n    secretBuffer,\n    'PBKDF2',\n    false,\n    ['deriveKey']\n  ).then(keyMaterial =>\n    crypto.subtle.deriveKey(\n      {\n        name: 'PBKDF2',\n        salt,\n        iterations: 100000,\n        hash: 'SHA-256'\n      },\n      keyMaterial,\n      {\n        name: 'AES-GCM',\n        length: 256\n      },\n      true,\n      ['encrypt', 'decrypt']\n    )\n  )\n}\n\n/**\n * @param {Uint8Array} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted, base64 encoded message\n */\nexport const encrypt = (data, key) => {\n  if (!key) {\n    return /** @type {PromiseLike<Uint8Array>} */ (promise.resolve(data))\n  }\n  const iv = crypto.getRandomValues(new Uint8Array(12))\n  return crypto.subtle.encrypt(\n    {\n      name: 'AES-GCM',\n      iv\n    },\n    key,\n    data\n  ).then(cipher => {\n    const encryptedDataEncoder = encoding.createEncoder()\n    encoding.writeVarString(encryptedDataEncoder, 'AES-GCM')\n    encoding.writeVarUint8Array(encryptedDataEncoder, iv)\n    encoding.writeVarUint8Array(encryptedDataEncoder, new Uint8Array(cipher))\n    return encoding.toUint8Array(encryptedDataEncoder)\n  })\n}\n\n/**\n * @param {Object} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted data, if key is provided\n */\nexport const encryptJson = (data, key) => {\n  const dataEncoder = encoding.createEncoder()\n  encoding.writeAny(dataEncoder, data)\n  return encrypt(encoding.toUint8Array(dataEncoder), key)\n}\n\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} decrypted buffer\n */\nexport const decrypt = (data, key) => {\n  if (!key) {\n    return /** @type {PromiseLike<Uint8Array>} */ (promise.resolve(data))\n  }\n  const dataDecoder = decoding.createDecoder(data)\n  const algorithm = decoding.readVarString(dataDecoder)\n  if (algorithm !== 'AES-GCM') {\n    promise.reject(error.create('Unknown encryption algorithm'))\n  }\n  const iv = decoding.readVarUint8Array(dataDecoder)\n  const cipher = decoding.readVarUint8Array(dataDecoder)\n  return crypto.subtle.decrypt(\n    {\n      name: 'AES-GCM',\n      iv\n    },\n    key,\n    cipher\n  ).then(data => new Uint8Array(data))\n}\n\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Object>} decrypted object\n */\nexport const decryptJson = (data, key) =>\n  decrypt(data, key).then(decryptedValue =>\n    decoding.readAny(decoding.createDecoder(new Uint8Array(decryptedValue)))\n  )\n","import * as error from 'lib0/error'\nimport * as random from 'lib0/random'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport { Observable } from 'lib0/observable'\nimport * as logging from 'lib0/logging'\nimport * as promise from 'lib0/promise'\nimport * as bc from 'lib0/broadcastchannel'\nimport { createMutex } from 'lib0/mutex'\n\nimport * as Y from \"yjs\"; // eslint-disable-line\n\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as awarenessProtocol from 'y-protocols/awareness'\n\nimport * as cryptoutils from './crypto.js'\n\nimport * as Ably from 'ably/promises.js'\n\nconst log = logging.createModuleLogger('y-ably')\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageBcPeerId = 4\n\n/**\n * @type {Map<string,Room>}\n */\nconst rooms = new Map()\n\n/**\n * @param {Room} room\n */\nconst checkIsSynced = (room) => {\n  let synced = true\n  room.roomPeers.forEach((isSynced) => {\n    if (!isSynced) {\n      synced = false\n    }\n  })\n  if ((!synced && room.synced) || (synced && !room.synced)) {\n    room.synced = synced\n    room.provider.emit('synced', [{ synced }])\n    log('synced ', logging.BOLD, room.name, logging.UNBOLD, ' with all peers')\n  }\n}\n\n/**\n * @param {Room} room\n * @param {Uint8Array} buf\n * @param {function} syncedCallback\n * @return {encoding.Encoder?}\n */\nconst readMessage = (room, buf, syncedCallback) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  if (room === undefined) {\n    return null\n  }\n  const awareness = room.awareness\n  const doc = room.doc\n  let sendReply = false\n  switch (messageType) {\n    case messageSync: {\n      encoding.writeVarUint(encoder, messageSync)\n      const syncMessageType = syncProtocol.readSyncMessage(\n        decoder,\n        encoder,\n        doc,\n        room\n      )\n      if (\n        syncMessageType === syncProtocol.messageYjsSyncStep2 &&\n        !room.synced\n      ) {\n        syncedCallback()\n      }\n      if (syncMessageType === syncProtocol.messageYjsSyncStep1) {\n        sendReply = true\n      }\n      break\n    }\n    case messageQueryAwareness:\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(\n        encoder,\n        awarenessProtocol.encodeAwarenessUpdate(\n          awareness,\n          Array.from(awareness.getStates().keys())\n        )\n      )\n      sendReply = true\n      break\n    case messageAwareness:\n      awarenessProtocol.applyAwarenessUpdate(\n        awareness,\n        decoding.readVarUint8Array(decoder),\n        room\n      )\n      break\n    case messageBcPeerId: {\n      const add = decoding.readUint8(decoder) === 1\n      const peerName = decoding.readVarString(decoder)\n      if (\n        peerName !== room.peerId &&\n        ((room.bcConns.has(peerName) && !add) ||\n          (!room.bcConns.has(peerName) && add))\n      ) {\n        const removed = []\n        const added = []\n        if (add) {\n          room.bcConns.add(peerName)\n          added.push(peerName)\n        } else {\n          room.bcConns.delete(peerName)\n          removed.push(peerName)\n        }\n        broadcastBcPeerId(room)\n      }\n      break\n    }\n    default:\n      console.error('Unable to compute message')\n      return encoder\n  }\n  if (!sendReply) {\n    // nothing has been written, no answer created\n    return null\n  }\n  return encoder\n}\n\n/**\n * @param {Room} room\n * @param {String} clientId\n */\nconst initialSync = (room, clientId) => {\n  const provider = room.provider\n  const doc = provider.doc\n  const awareness = room.awareness\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, messageSync)\n  syncProtocol.writeSyncStep1(encoder, doc)\n  room.channel.publish(clientId, encoding.toUint8Array(encoder))\n  const awarenessStates = awareness.getStates()\n  if (awarenessStates.size > 0) {\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoder,\n      awarenessProtocol.encodeAwarenessUpdate(\n        awareness,\n        Array.from(awarenessStates.keys())\n      )\n    )\n    room.channel.publish(clientId, encoding.toUint8Array(encoder))\n  }\n}\n\n/**\n * @param {Room} room\n * @param {String} clientId\n * @param {Uint8Array} buf\n * @return {encoding.Encoder?}\n */\nconst readPeerMessage = (room, clientId, buf) => {\n  console.log('reading peer meesage')\n  log(\n    'received message from ',\n    logging.BOLD,\n    clientId,\n    logging.GREY,\n    ' (',\n    room.name,\n    ')',\n    logging.UNBOLD,\n    logging.UNCOLOR\n  )\n  return readMessage(room, buf, () => {\n    room.roomPeers.set(clientId, true)\n    log(\n      'synced ',\n      logging.BOLD,\n      room.name,\n      logging.UNBOLD,\n      ' with ',\n      logging.BOLD,\n      clientId\n    )\n    checkIsSynced(room)\n  })\n}\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastAblyChannel = (room, m) => {\n  log('broadcast message in ', logging.BOLD, room.name, logging.UNBOLD)\n  room.roomPeers.forEach((_, clientID) => {\n    try {\n      room.channel.publish(clientID, m)\n    } catch (e) {\n      console.error(e)\n    }\n  })\n}\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastBcMessage = (room, m) =>\n  cryptoutils\n    .encrypt(m, room.key)\n    .then((data) => room.mux(() => bc.publish(room.name, data)))\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastRoomMessage = (room, m) => {\n  if (room.bcconnected) {\n    broadcastBcMessage(room, m)\n  }\n  broadcastAblyChannel(room, m)\n}\n\n/**\n * @param {Room} room\n */\nconst broadcastBcPeerId = (room) => {\n  if (room.provider.filterBcConns) {\n    // broadcast peerId via broadcastchannel\n    const encoderPeerIdBc = encoding.createEncoder()\n    encoding.writeVarUint(encoderPeerIdBc, messageBcPeerId)\n    encoding.writeUint8(encoderPeerIdBc, 1)\n    encoding.writeVarString(encoderPeerIdBc, room.peerId)\n    broadcastBcMessage(room, encoding.toUint8Array(encoderPeerIdBc))\n  }\n}\n\nexport class Room {\n  /**\n   * @param {Y.Doc} doc\n   * @param {AblyProvider} provider\n   * @param {string} name\n   * @param {CryptoKey|null} key\n   */\n  constructor (doc, provider, name, key) {\n    /**\n     * @type {Ably.Types.RealtimeChannelPromise}\n     */\n    this.channel = null\n\n    this.ably = null\n    /**\n     * Do not assume that peerId is unique. This is only meant for sending signaling messages.\n     *\n     * @type {string}\n     */\n\n    this.peerId = random.uuidv4()\n    this.doc = doc\n    /**\n     * @type {awarenessProtocol.Awareness}\n     */\n    this.awareness = provider.awareness\n    this.provider = provider\n    this.synced = false\n    this.name = name\n    // @todo make key secret by scoping\n    this.key = key\n    /**\n     * @type {Map<string, Boolean>}\n     */\n    this.roomPeers = new Map()\n    /**\n     * @type {Set<string>}\n     */\n    this.bcConns = new Set()\n    this.mux = createMutex()\n    this.bcconnected = false\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = (data) =>\n      cryptoutils.decrypt(new Uint8Array(data), key).then((m) =>\n        this.mux(() => {\n          const reply = readMessage(this, m, () => {})\n          if (reply) {\n            broadcastBcMessage(this, encoding.toUint8Array(reply))\n          }\n        })\n      )\n    /**\n     * Listens to Yjs updates and sends them to remote peers\n     *\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._docUpdateHandler = (update, origin) => {\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeUpdate(encoder, update)\n      broadcastRoomMessage(this, encoding.toUint8Array(encoder))\n    }\n    /**\n     * Listens to Awareness updates and sends them to remote peers\n     *\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoderAwareness = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwareness, messageAwareness)\n      encoding.writeVarUint8Array(\n        encoderAwareness,\n        awarenessProtocol.encodeAwarenessUpdate(this.awareness, changedClients)\n      )\n      broadcastRoomMessage(this, encoding.toUint8Array(encoderAwareness))\n    }\n\n    this._beforeUnloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(\n        this.awareness,\n        [doc.clientID],\n        'window unload'\n      )\n      rooms.forEach((room) => {\n        room.disconnect()\n      })\n    }\n\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._beforeUnloadHandler)\n    }\n  }\n\n  connect () {\n    this.doc.on('update', this._docUpdateHandler)\n    this.awareness.on('update', this._awarenessUpdateHandler)\n    // signal through all available signaling connections\n    const roomName = this.name\n    bc.subscribe(roomName, this._bcSubscriber)\n    this.bcconnected = true\n    // broadcast peerId via broadcastchannel\n    broadcastBcPeerId(this)\n    // write sync step 1\n    const encoderSync = encoding.createEncoder()\n    encoding.writeVarUint(encoderSync, messageSync)\n    syncProtocol.writeSyncStep1(encoderSync, this.doc)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderSync))\n    // broadcast local state\n    const encoderState = encoding.createEncoder()\n    encoding.writeVarUint(encoderState, messageSync)\n    syncProtocol.writeSyncStep2(encoderState, this.doc)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderState))\n    // write queryAwareness\n    const encoderAwarenessQuery = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderAwarenessQuery))\n    // broadcast local awareness state\n    const encoderAwarenessState = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoderAwarenessState,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ])\n    )\n    broadcastBcMessage(this, encoding.toUint8Array(encoderAwarenessState))\n\n    // ably channel connection\n\n    this.ably = new Ably.Realtime.Promise({\n      key: 'FMUiqg._Hd2rw:15F6cbPJOTm3tw_6nVGB4NP6fctbZUKDZaV2lty9RuY',\n      clientId: this.peerId\n    })\n    this.ably.connection.once('connected').then(() => {\n      this.channel = this.ably.channels.get(this.name)\n      this.channel.presence.enter()\n      this.channel.presence.get().then((members) => {\n        members.forEach((member) => {\n          if (this.peerId !== member.clientId) {\n            this.roomPeers.set(member.clientId, false)\n            initialSync(this, member.clientId)\n          }\n        })\n      })\n\n      this.channel.presence.subscribe('enter', (member) => {\n        if (this.peerId !== member.clientId) {\n          this.roomPeers.set(member.clientId, false)\n          initialSync(this, member.clientId)\n        }\n      })\n      this.channel.presence.subscribe('leave', (member) => {\n        this.roomPeers.delete(member.clientId)\n        checkIsSynced(this)\n      })\n      this.channel.subscribe(this.peerId, (message) => {\n        console.log('Received message in realtime: ')\n        console.log(message.data)\n        const answer = readPeerMessage(this, message.clientId, message.data)\n        if (answer !== null) {\n          this.channel.publish(message.clientId, encoding.toUint8Array(answer))\n        }\n      })\n    })\n  }\n\n  disconnect () {\n    awarenessProtocol.removeAwarenessStates(\n      this.awareness,\n      [this.doc.clientID],\n      'disconnect'\n    )\n    // broadcast peerId removal via broadcastchannel\n    const encoderPeerIdBc = encoding.createEncoder()\n    encoding.writeVarUint(encoderPeerIdBc, messageBcPeerId)\n    encoding.writeUint8(encoderPeerIdBc, 0) // remove peerId from other bc peers\n    encoding.writeVarString(encoderPeerIdBc, this.peerId)\n    broadcastBcMessage(this, encoding.toUint8Array(encoderPeerIdBc))\n\n    bc.unsubscribe(this.name, this._bcSubscriber)\n    this.bcconnected = false\n    this.doc.off('update', this._docUpdateHandler)\n    this.awareness.off('update', this._awarenessUpdateHandler)\n\n    this.ably.close()\n  }\n\n  destroy () {\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('beforeunload', this._beforeUnloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._beforeUnloadHandler)\n    }\n  }\n}\n\n/**\n * @param {Y.Doc} doc\n * @param {AblyProvider} provider\n * @param {string} name\n * @param {CryptoKey|null} key\n * @return {Room}\n */\nconst openRoom = (doc, provider, name, key) => {\n  // there must only be one room\n  if (rooms.has(name)) {\n    throw error.create(`A Yjs Doc connected to room \"${name}\" already exists!`)\n  }\n  const room = new Room(doc, provider, name, key)\n  rooms.set(name, /** @type {Room} */ (room))\n  return room\n}\n\n/**\n * @typedef {Object} ProviderOptions\n * @property {Array<string>} [signaling]\n * @property {string} [password]\n * @property {awarenessProtocol.Awareness} [awareness]\n * @property {number} [maxConns]\n * @property {boolean} [filterBcConns]\n * @property {any} [peerOpts]\n */\n\n/**\n * @extends Observable<string>\n */\nexport class AblyProvider extends Observable {\n  /**\n   * @param {string} roomName\n   * @param {Y.Doc} doc\n   * @param {ProviderOptions?} opts\n   */\n  constructor (\n    roomName,\n    doc,\n    {\n      password = null,\n      awareness = new awarenessProtocol.Awareness(doc),\n      filterBcConns = true\n    } = {}\n  ) {\n    super()\n    this.roomName = roomName\n    this.doc = doc\n    this.filterBcConns = filterBcConns\n    /**\n     * @type {awarenessProtocol.Awareness}\n     */\n    this.awareness = awareness\n    this.shouldConnect = false\n    /**\n     * @type {PromiseLike<CryptoKey | null>}\n     */\n    this.key = password\n      ? cryptoutils.deriveKey(password, roomName)\n      : /** @type {PromiseLike<null>} */ (promise.resolve(null))\n    /**\n     * @type {Room|null}\n     */\n    this.room = null\n    this.key.then((key) => {\n      this.room = openRoom(doc, this, roomName, key)\n      this.room.connect()\n    })\n    this.destroy = this.destroy.bind(this)\n    doc.on('destroy', this.destroy)\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get connected () {\n    return this.room !== null && this.shouldConnect\n  }\n\n  connect () {\n    if (!this.connected) {\n      this.room.connect()\n    }\n    this.shouldConnect = true\n  }\n\n  disconnect () {\n    if (this.connected) {\n      this.room.disconnect()\n    }\n    this.shouldConnect = false\n  }\n\n  destroy () {\n    this.doc.off('destroy', this.destroy)\n    // need to wait for key before deleting room\n    this.key.then(() => {\n      /** @type {Room} */ (this.room).destroy()\n      rooms.delete(this.roomName)\n    })\n    super.destroy()\n  }\n}\n"],"names":["string.encodeUtf8","promise.resolve","encoding.createEncoder","encoding.writeVarString","encoding.writeVarUint8Array","encoding.toUint8Array","decoding.createDecoder","decoding.readVarString","promise.reject","error.create","decoding.readVarUint8Array","logging.createModuleLogger","logging.BOLD","logging.UNBOLD","decoding.readVarUint","encoding.writeVarUint","syncProtocol.readSyncMessage","syncProtocol.messageYjsSyncStep2","syncProtocol.messageYjsSyncStep1","awarenessProtocol.encodeAwarenessUpdate","awarenessProtocol.applyAwarenessUpdate","decoding.readUint8","syncProtocol.writeSyncStep1","logging.GREY","logging.UNCOLOR","cryptoutils\n    .encrypt","bc.publish","encoding.writeUint8","random.uuidv4","cryptoutils.decrypt","syncProtocol.writeUpdate","awarenessProtocol.removeAwarenessStates","bc.subscribe","syncProtocol.writeSyncStep2","Ably.Realtime","bc.unsubscribe","awarenessProtocol.Awareness","cryptoutils.deriveKey"],"mappings":"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"}